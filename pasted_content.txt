# DevGrowth - 개발자 성장 추적 웹 앱 PRD
*Product Requirements Document v1.0*

---

## 🎯 1. 제품 개요

### **제품명**
DevGrowth - Daily Developer Growth Tracker

### **제품 비전**
"매일 조금씩 성장하는 개발자를 위한 개인 맞춤형 학습 관리 플랫폼"

### **핵심 가치 제안**
- Claude Code 기반 체계적 학습 가이드 제공
- 일일 성장 목표 설정 및 추적
- 개인화된 학습 경로 관리
- 실시간 진행 상황 시각화

### **제품 목표**
1. 초보 개발자의 체계적 성장 지원
2. 매일 실천 가능한 학습 루틴 제공
3. 장기적 성장 목표 달성을 위한 동기 부여
4. 개발 스킬 향상 과정의 가시화

---

## 👥 2. 타겟 사용자 및 문제 정의

### **Primary User**
- **초보 개발자 (0-2년차)**
  - 나이: 20-35세
  - 목표: 체계적인 개발 스킬 향상
  - 문제: 학습 방향성 부족, 진도 관리 어려움

### **Secondary User**
- **전환 개발자 (Career Changer)**
  - 나이: 25-40세
  - 목표: 빠른 기술 습득과 실무 역량 개발
  - 문제: 효율적 학습 경로 부재

### **해결하고자 하는 문제**
1. **학습 방향성 부족**: 무엇을 어떤 순서로 학습해야 할지 모름
2. **진도 관리 어려움**: 학습 진행 상황을 체계적으로 추적하지 못함
3. **동기 부여 부족**: 장기 목표 달성을 위한 지속적 동기 부여 필요
4. **자료 분산**: 학습 자료와 코드가 여러 곳에 산재
5. **성장 측정 어려움**: 객관적인 성장 지표 부재

---

## 🏗️ 3. 기능 요구사항

### **3.1 Core Features (MVP)**

#### **📊 대시보드**
- **오늘의 학습 현황**
  - 완료된 과제 수 / 전체 과제 수
  - 학습 시간 추적
  - 연속 학습 일수 (Streak)
  - 주간/월간 진도율

- **빠른 액션 버튼**
  - 오늘의 과제 시작
  - 새 프로젝트 생성
  - 학습 노트 작성
  - Claude Code 가이드 보기

#### **📚 학습 가이드 시스템**
- **단계별 학습 경로**
  - 8주 완주 프로그램 (앞서 정의한 내용)
  - 각 주차별 상세 커리큘럼
  - 일일 학습 체크리스트
  - 난이도별 과제 분류

- **인터랙티브 체크리스트**
  - 체크박스 형태의 과제 목록
  - 완료 시 진행률 자동 업데이트
  - 과제별 상세 설명 모달
  - 힌트 및 도움말 제공

#### **📁 파일 관리 시스템**
- **프로젝트 구조 관리**
  - 날짜별 폴더 구조 시각화
  - 파일 생성/수정/삭제 로그
  - 중요 파일 즐겨찾기
  - 파일 태그 시스템

- **코드 스니펫 저장소**
  - 자주 사용하는 코드 저장
  - 카테고리별 분류 (JavaScript, CSS, HTML 등)
  - 검색 기능
  - 사용 빈도 통계

#### **🎯 목표 설정 및 추적**
- **SMART 목표 설정**
  - 단기 목표 (주간)
  - 중기 목표 (월간)
  - 장기 목표 (3개월)
  - 목표 달성률 시각화

- **성과 측정 지표**
  - 완료한 프로젝트 수
  - 학습 시간 누적
  - 코드 커밋 수
  - 해결한 문제 수

### **3.2 Advanced Features (v2.0)**

#### **💡 AI 기반 학습 추천**
- **개인화된 학습 경로**
  - 현재 스킬 레벨 분석
  - 약점 분야 식별
  - 맞춤형 과제 추천
  - 학습 속도 최적화

#### **🤝 커뮤니티 기능**
- **학습 그룹 형성**
  - 비슷한 레벨의 사용자 매칭
  - 공동 프로젝트 관리
  - 코드 리뷰 요청/제공
  - 질문 & 답변 게시판

#### **📈 심화 분석 도구**
- **성장 패턴 분석**
  - 학습 효율성 분석
  - 생산성 최적 시간대 식별
  - 기술별 숙련도 레이더 차트
  - 개선 영역 추천

---

## 🎨 4. 사용자 경험 (UX) 요구사항

### **4.1 정보 구조 (Information Architecture)**

```
📱 DevGrowth App
├── 🏠 홈 (대시보드)
│   ├── 오늘의 현황
│   ├── 빠른 액션
│   └── 최근 활동
├── 📚 학습 가이드
│   ├── 8주 프로그램
│   ├── 일일 체크리스트
│   └── 주차별 상세 내용
├── 📁 파일 관리
│   ├── 프로젝트 구조
│   ├── 코드 스니펫
│   └── 학습 노트
├── 🎯 목표 관리
│   ├── 목표 설정
│   ├── 진행 상황
│   └── 성과 분석
├── 📊 통계
│   ├── 성장 지표
│   ├── 학습 패턴
│   └── 성과 리포트
└── ⚙️ 설정
    ├── 개인 정보
    ├── 알림 설정
    └── 백업/복원
```

### **4.2 핵심 사용자 플로우**

#### **신규 사용자 온보딩**
1. 웰컴 페이지 → 2. 현재 스킬 레벨 선택 → 3. 학습 목표 설정 → 4. 일일 학습 시간 설정 → 5. 첫 번째 과제 시작

#### **일일 학습 플로우**
1. 로그인 → 2. 대시보드 확인 → 3. 오늘의 과제 보기 → 4. 과제 수행 → 5. 완료 체크 → 6. 진행 상황 확인

#### **주간 리뷰 플로우**
1. 통계 페이지 접속 → 2. 주간 성과 확인 → 3. 다음 주 목표 설정 → 4. 학습 계획 조정

### **4.3 디자인 요구사항**

#### **디자인 시스템**
- **컬러 팔레트**
  - Primary: #3B82F6 (파란색 - 신뢰감)
  - Secondary: #10B981 (초록색 - 성장)
  - Accent: #F59E0B (주황색 - 에너지)
  - Neutral: #6B7280 (회색 - 차분함)

- **타이포그래피**
  - Heading: Inter (굵고 현대적)
  - Body: Inter (가독성 우수)
  - Code: Fira Code (코드 친화적)

#### **반응형 디자인**
- **Desktop First** 접근 (개발자 주 작업 환경)
- **Mobile Optimized** (이동 중 학습 확인)
- **Tablet Friendly** (코드 리뷰 및 학습)

---

## 🔧 5. 기술 요구사항

### **5.1 프론트엔드**
- **Framework**: React 18 + TypeScript
- **State Management**: Zustand (가벼운 상태 관리)
- **Styling**: Tailwind CSS + Headless UI
- **Charts**: Chart.js 또는 Recharts
- **Code Highlighting**: Prism.js 또는 Monaco Editor

### **5.2 백엔드**
- **Runtime**: Node.js 18+ 
- **Framework**: Express.js + TypeScript
- **Database**: PostgreSQL (관계형 데이터) + Redis (캐싱)
- **ORM**: Prisma (타입 안전 + 개발자 경험)
- **Authentication**: JWT + Refresh Token

### **5.3 인프라**
- **Hosting**: Vercel (프론트엔드) + Railway (백엔드)
- **Database**: Supabase (PostgreSQL) + Upstash (Redis)
- **File Storage**: AWS S3 (코드 파일 백업)
- **Monitoring**: Sentry (에러 추적) + Vercel Analytics

### **5.4 개발 도구**
- **Version Control**: Git + GitHub
- **CI/CD**: GitHub Actions
- **Testing**: Jest + React Testing Library
- **Code Quality**: ESLint + Prettier + Husky

---

## 📊 6. 성능 요구사항

### **6.1 응답 시간**
- **페이지 로드**: < 2초
- **API 응답**: < 500ms
- **데이터 업데이트**: < 200ms
- **파일 업로드**: < 5초 (10MB 이하)

### **6.2 확장성**
- **동시 사용자**: 1,000명 (초기), 10,000명 (1년 후)
- **데이터 저장**: 사용자당 500MB (코드 파일 포함)
- **API 처리량**: 10,000 req/min

### **6.3 가용성**
- **Uptime**: 99.9% (월 43분 이하 다운타임)
- **데이터 백업**: 일 1회 자동 백업
- **재해 복구**: 4시간 이내 복원

---

## 🔐 7. 보안 요구사항

### **7.1 인증 및 권한**
- **사용자 인증**: JWT 기반 토큰 인증
- **비밀번호 정책**: 8자 이상, 특수문자 포함
- **세션 관리**: 24시간 자동 만료
- **API 보안**: Rate Limiting (100 req/min/user)

### **7.2 데이터 보호**
- **암호화**: 
  - 전송 중: HTTPS/TLS 1.3
  - 저장 중: AES-256 (민감 데이터)
- **개인정보 보호**: GDPR 준수
- **코드 보안**: 업로드 파일 스캔 (악성 코드 검사)

### **7.3 보안 모니터링**
- **로그 관리**: 모든 API 호출 로그
- **이상 탐지**: 비정상적 접근 패턴 감지
- **보안 업데이트**: 월 1회 보안 패치

---

## 📈 8. 성공 지표 (KPI)

### **8.1 사용자 지표**
- **DAU (Daily Active Users)**: 목표 80% (가입자 대비)
- **WAU (Weekly Active Users)**: 목표 90%
- **사용자 유지율**: 1개월 60%, 3개월 40%
- **평균 사용 시간**: 30분/일

### **8.2 학습 성과 지표**
- **완주율**: 8주 프로그램 완주 사용자 30%
- **일일 목표 달성률**: 평균 70%
- **프로젝트 완성률**: 사용자당 월 2개 프로젝트
- **스킬 향상 측정**: 자가 평가 기준 월 10% 향상

### **8.3 비즈니스 지표**
- **가입자 수**: 1,000명 (3개월), 5,000명 (1년)
- **이탈률**: 월 15% 이하
- **NPS (Net Promoter Score)**: 50+ 목표
- **피처 사용률**: 핵심 기능 80% 이상 사용

---

## 🚀 9. 출시 계획

### **9.1 개발 일정**

#### **Phase 1 - MVP (6주)**
- **Week 1-2**: 프로젝트 설정, 기본 UI 구성
- **Week 3-4**: 학습 가이드 시스템, 체크리스트 구현
- **Week 5-6**: 파일 관리, 목표 설정 기능, 테스트

#### **Phase 2 - 기능 완성 (4주)**
- **Week 7-8**: 통계 및 분석 기능, 사용자 설정
- **Week 9-10**: 성능 최적화, 보안 강화, 버그 수정

#### **Phase 3 - 베타 출시 (2주)**
- **Week 11-12**: 베타 사용자 테스트, 피드백 반영

### **9.2 출시 전략**

#### **소프트 론칭**
- **타겟**: 개발자 커뮤니티 (디스코드, 슬랙)
- **규모**: 100명 베타 사용자
- **기간**: 2주

#### **공식 출시**
- **채널**: 개발자 블로그, 소셜 미디어
- **홍보**: 개발자 유튜버 협업, 기술 블로그 게스트 포스팅
- **목표**: 1,000명 가입자 (출시 후 1개월)

---

## 💡 10. 추가 고려사항

### **10.1 접근성**
- **WCAG 2.1 AA** 준수
- **키보드 내비게이션** 완전 지원
- **스크린 리더** 호환성
- **다국어 지원** 준비 (한국어, 영어 우선)

### **10.2 확장 가능성**
- **모바일 앱**: React Native 기반 (Phase 4)
- **AI 튜터**: OpenAI API 연동 (Phase 5)
- **실시간 협업**: 동시 편집 기능 (Phase 6)
- **기업 버전**: 팀 관리 기능 (Phase 7)

### **10.3 수익 모델**
- **Freemium**: 기본 기능 무료, 고급 기능 유료
- **Pro 플랜**: $9.99/월 (무제한 프로젝트, AI 추천)
- **Team 플랜**: $19.99/월 (팀 협업, 관리자 도구)

---

## 📋 11. 개발 우선순위

### **High Priority (Must Have)**
- [ ] 사용자 인증 시스템
- [ ] 학습 가이드 표시
- [ ] 일일 체크리스트
- [ ] 기본 대시보드
- [ ] 파일 관리 시스템

### **Medium Priority (Should Have)**
- [ ] 목표 설정 및 추적
- [ ] 통계 및 분석
- [ ] 코드 스니펫 저장소
- [ ] 성과 리포트
- [ ] 알림 시스템

### **Low Priority (Could Have)**
- [ ] 커뮤니티 기능
- [ ] AI 추천 시스템
- [ ] 고급 분석 도구
- [ ] 모바일 최적화
- [ ] 다국어 지원

---

## 🎯 12. 즉시 개발 시작을 위한 기술 스택

### **추천 스택 (빠른 개발)**
```typescript
// 프론트엔드
Framework: Next.js 14 + TypeScript
UI Library: Tailwind CSS + Radix UI
State: Zustand
Database: Supabase (PostgreSQL)
Authentication: NextAuth.js
Deployment: Vercel

// 기본 폴더 구조
src/
├── app/                 # Next.js 14 App Router
├── components/          # 재사용 가능한 컴포넌트
├── lib/                 # 유틸리티 함수
├── store/              # Zustand 스토어
├── types/              # TypeScript 타입
└── styles/             # 글로벌 스타일
```

### **MVP 개발 우선순위**
1. **사용자 인증** (NextAuth.js)
2. **대시보드 레이아웃** (Tailwind CSS)
3. **학습 가이드 페이지** (Markdown 렌더링)
4. **체크리스트 기능** (로컬 스토리지)
5. **진행 상황 시각화** (Chart.js)

---

**이 PRD를 기반으로 지금 바로 개발을 시작할 수 있습니다. 먼저 MVP부터 구현하여 핵심 기능을 검증한 후 단계적으로 확장해나가는 것을 권장합니다.**

---

*마지막 업데이트: 2025-07-16 | 작성자: DevGrowth Team | 다음 리뷰: 2025-08-16*